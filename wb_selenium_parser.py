from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import pandas as pd
import time
from datetime import datetime
import logging
import re

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ó–∞–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
print("üõí –ü–∞—Ä—Å–µ—Ä Wildberries.by")
search_query = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()

min_rating_input = input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4.5, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ): ").strip()
min_rating = float(min_rating_input.replace(',', '.')) if min_rating_input else 0.0

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
region = "by"
url = f"https://www.wildberries.{region}/catalog/0/search.aspx?search={search_query}"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ ---
options = Options()
# options.add_argument("--headless")  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--disable-gpu")
options.add_argument("--disable-extensions")
options.add_argument("--disable-blink-features=AutomationControlled")
options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")

print(f"üåç –†–µ–≥–∏–æ–Ω: {region}")
print(f"üîç –ó–∞–ø—Ä–æ—Å: '{search_query}'")
print(f"‚≠ê –ú–∏–Ω. —Ä–µ–π—Ç–∏–Ω–≥: {min_rating}" if min_rating > 0 else "‚≠ê –†–µ–π—Ç–∏–Ω–≥: –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º")
print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")

# --- –ó–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞ ---
try:
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => false});")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Chrome: {e}")
    exit()

try:
    driver.get(url)

    # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    try:
        wait = WebDriverWait(driver, 15)
        wait.until(EC.presence_of_element_located((By.CLASS_NAME, "product-card")))
    except Exception as e:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        driver.quit()
        exit()

    time.sleep(4)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    products = driver.find_elements(By.CLASS_NAME, "product-card")
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")

    result = []

    for i, product in enumerate(products[:30]):
        try:
            # --- –ù–∞–∑–≤–∞–Ω–∏–µ ---
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ aria-label
                link = product.find_element(By.CSS_SELECTOR, "a[href*='/detail.aspx']")
                name = link.get_attribute("aria-label").strip()
            except:
                try:
                    # –†–µ–∑–µ—Ä–≤: –ø–æ –∫–ª–∞—Å—Å—É
                    name_elem = product.find_element(By.CLASS_NAME, "product-card__name")
                    name = name_elem.text.strip()
                except:
                    name = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

            # --- –°—Å—ã–ª–∫–∞ ---
            try:
                link_url = link.get_attribute("href") if 'link' in locals() else ""
            except:
                link_url = ""

            # --- –†–µ–π—Ç–∏–Ω–≥ ---
            rating = 0.0
            try:
                # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
                rating_elem = product.find_element(By.CLASS_NAME, "address-rate-mini")
                rating_text = rating_elem.text.strip().replace(',', '.')
                match = re.search(r'(\d+\.?\d*)', rating_text)
                if match:
                    rating = float(match.group(1))
            except:
                pass

            # --- –¶–µ–Ω–∞ ---
            price = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            price_num = None
            try:
                # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä: <ins class="price__lower-price red-price">53,79&nbsp;—Ä.</ins>
                price_elem = product.find_element(By.CSS_SELECTOR, "ins.price__lower-price")
                price_text = price_elem.text.strip()

                # –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –∑–∞–ø—è—Ç–æ–π
                clean_price = ''.join(c for c in price_text if c.isdigit() or c == ',')
                # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —á–∏—Å–ª–æ
                if clean_price:
                    price_num = float(clean_price.replace(',', '.'))
            except:
                try:
                    # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                    price_elem = product.find_element(By.CSS_SELECTOR, ".price__current")
                    price_text = price_elem.text.strip()
                    clean_price = ''.join(c for c in price_text if c.isdigit() or c == ',')
                    if clean_price:
                        price_num = float(clean_price.replace(',', '.'))
                except:
                    pass

            # --- –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É ---
            if rating < min_rating:
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Ü–µ–Ω–∞ –∫–∞–∫ —á–∏—Å–ª–æ
            result.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
                "–¶–µ–Ω–∞": price_num,  # –ß–∏—Å–ª–æ: 53.79
                "–†–µ–π—Ç–∏–Ω–≥": rating,
                "–°—Å—ã–ª–∫–∞": link_url
            })

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ {i}: {e}")
            continue

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ ---
    if not result:
        print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
    else:
        df = pd.DataFrame(result)

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ '–¶–µ–Ω–∞' ‚Äî —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø
        df["–¶–µ–Ω–∞"] = pd.to_numeric(df["–¶–µ–Ω–∞"], errors='coerce')

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã
        df = df.sort_values(by="–¶–µ–Ω–∞", ascending=True, na_position='last')

        # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ ---
        today = datetime.now().strftime("%d.%m.%Y")
        safe_query = "".join(c for c in search_query if c.isalnum() or c in "._- ").replace(" ", "_")
        filename = f"wb_{safe_query}_{today}.xlsx"

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
        try:
            df.to_excel(filename, index=False, engine='openpyxl')
            print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df)} —Ç–æ–≤–∞—Ä–æ–≤ –≤:")
            print(f"üíæ {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
finally:
    driver.quit()